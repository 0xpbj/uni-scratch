"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/lib/utils");
const __1 = require("../..");
const ethers_provider_1 = require("../../ethers-provider");
const fun_token_mock_1 = require("../../mocks/fun-token.mock");
const uniswap_pair_contract_factory_1 = require("./uniswap-pair-contract.factory");
describe('UniswapPairContractFactory', () => {
    const ethersProvider = new ethers_provider_1.EthersProvider(__1.ChainId.MAINNET);
    const uniswapPairContractFactory = new uniswap_pair_contract_factory_1.UniswapPairContractFactory(ethersProvider);
    it('allPairs', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield uniswapPairContractFactory.allPairs('0x01');
        expect(result).toEqual('0x3139Ffc91B99aa94DA8A2dc13f1fC36F9BDc98eE');
    }));
    it('allPairsLength', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield uniswapPairContractFactory.allPairsLength();
        expect(utils_1.isHexString(result)).toEqual(true);
    }));
    it('createPair', () => {
        const result = uniswapPairContractFactory.createPair(fun_token_mock_1.MOCKFUN().contractAddress, __1.WETH.MAINNET().contractAddress);
        expect(result).toEqual('0xc9c65396000000000000000000000000419d0d8bdd9af5e606ae2232ed285aff190e711b000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2');
    });
    it('feeTo', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield uniswapPairContractFactory.feeTo();
        expect(utils_1.isHexString(result)).toEqual(true);
    }));
    it('feeToSetter', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield uniswapPairContractFactory.feeToSetter();
        expect(utils_1.isHexString(result)).toEqual(true);
    }));
    it('getPair', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield uniswapPairContractFactory.getPair(__1.WETH.MAINNET().contractAddress, fun_token_mock_1.MOCKFUN().contractAddress);
        expect(result).toEqual('0x05B0c1D8839eF3a989B33B6b63D3aA96cB7Ec142');
    }));
    it('setFeeTo', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield uniswapPairContractFactory.setFeeTo('0x05B0c1D8839eF3a989B33B6b63D3aA96cB7Ec142');
        expect(result).toEqual('0xf46901ed00000000000000000000000005b0c1d8839ef3a989b33b6b63d3aa96cb7ec142');
    }));
    it('setFeeToSetter', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield uniswapPairContractFactory.setFeeToSetter('0x05B0c1D8839eF3a989B33B6b63D3aA96cB7Ec142');
        expect(result).toEqual('0xa2e74af600000000000000000000000005b0c1d8839ef3a989b33b6b63d3aa96cb7ec142');
    }));
});
